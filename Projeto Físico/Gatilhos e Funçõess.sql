--GATILHOS

UPDATE DESCONTO SET PORCENTAGEM = PORCENTAGEM + 0.05;

INSERT INTO APRESENTADOR VALUES ('0444', 'D_A', 'DA@gmail.com', '(81) 5004-7000', '(81) 1759-5480', 500);

UPDATE APRESENTADOR SET NOME = 'E_A', EMAIL = 'EA@gmail.com' WHERE CPF = '0444';

UPDATE APRESENTADOR SET COMISSAO = COMISSAO + 200 WHERE CPF = '0444';

INSERT INTO OUVINTE (CPF, NOME, EMAIL, TELEFONE1) VALUES ('0224', 'D_O', 'DO@gmail.com', '(81) 1000-1000');

INSERT INTO OUVINTE VALUES ('0225', 'E_O', 'EO@gmail.com', '(81) 1548-5687', '(81) 9004-8568');

INSERT INTO OUVINTE VALUES ('0226', 'F_O', 'FO@gmail.com', '(81) 3547-8964', '(81) 1478-9614');

DELETE FROM OUVINTE WHERE CPF = '0226';

INSERT INTO SALA VALUES (04, '0113');

UPDATE EventoContrato SET NOME = 'NOVONOME' WHERE COD_EV = 0003;

UPDATE OUVINTE SET TELEFONE2 = '(81) 1578-5445' WHERE CPF = '0222';

INSERT INTO INGRESSO VALUES (04, 25.50);

INSERT INTO COMPRA VALUES ('0225', 04, NULL);

DELETE FROM COMPRA WHERE CPF_OUVINTE = '0225' AND QR_CODE = 04;

DELETE FROM INGRESSO WHERE QR_CODE = 04;

--FUNÇÕES

-- Função para contar quantos eventos um funcionário participa
CREATE OR REPLACE FUNCTION CONTAR_EVENTOS_FUNCIONARIO(
    P_CPF VARCHAR  
) RETURN NUMBER IS
    V_TOTAL NUMBER; 
BEGIN
    SELECT COUNT(*) INTO V_TOTAL
    FROM TRABALHA
    WHERE CPF = P_CPF;
	
    RETURN V_TOTAL;
END;
/

CREATE OR REPLACE FUNCTION TOTAL_VENDAS
RETURN NUMBER IS  
    total NUMBER;
BEGIN
    SELECT COALESCE(SUM(i.VALOR), 0) INTO total
    FROM COMPRA c
    JOIN INGRESSO i ON c.QR_CODE = i.QR_CODE;

    RETURN total;
END;
/
    
CREATE OR REPLACE FUNCTION OUVINTE_COMPROU_INGRESSO(p_cpf VARCHAR)
RETURN VARCHAR AS
    existe NUMBER;
BEGIN
    SELECT COUNT(*) INTO existe FROM COMPRA WHERE CPF_OUVINTE = p_cpf;
    
    IF existe > 0 THEN
        RETURN 'SIM';
    ELSE
        RETURN 'NÃO';
    END IF;
END;
/
    
CREATE OR REPLACE FUNCTION CONTAR_INGRESSOS_VENDIDOS
RETURN NUMBER IS
    V_TOTAL NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_TOTAL FROM COMPRA;
    RETURN V_TOTAL;
END;
/

CREATE OR REPLACE FUNCTION OUVINTE_EXISTE(
    P_CPF VARCHAR
) RETURN NUMBER IS
    V_EXISTE NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_EXISTE FROM OUVINTE WHERE CPF = P_CPF;
    
    IF V_EXISTE > 0 THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
END;
/

-- Procedimentos

-- Procedure para cadastrar um novo Ouvinte
CREATE OR REPLACE TYPE TELEFONE_ARRAY AS VARRAY(2) OF NUMBER(8);
/

CREATE OR REPLACE PROCEDURE CADASTRAR_OUVINTE (
    P_CPF IN OUVINTE.CPF%TYPE,
    P_NOME IN OUVINTE.NOME%TYPE,
    P_EMAIL IN OUVINTE.EMAIL%TYPE,
    P_TELEFONE IN TELEFONE_ARRAY
) IS
BEGIN
    INSERT INTO OUVINTE (CPF, NOME, EMAIL, TELEFONE1, TELEFONE2)
    VALUES (P_CPF, P_NOME, P_EMAIL, P_TELEFONE(1), P_TELEFONE(2));

    DBMS_OUTPUT.PUT_LINE('OUVINTE CADASTRADO COM SUCESSO');
END CADASTRAR_OUVINTE;
/

-- Procedure para cadastrar um novo Apresentador 

CREATE OR REPLACE PROCEDURE CADASTRAR_APRESENTADOR (
    P_CPF IN APRESENTADOR.CPF%TYPE,
    P_NOME IN APRESENTADOR.NOME%TYPE,
    P_EMAIL IN APRESENTADOR.EMAIL%TYPE,
    P_COMISSAO IN APRESENTADOR.COMISSAO%TYPE,
    P_TELEFONE IN TELEFONE_ARRAY
) IS
BEGIN
    INSERT INTO APRESENTADOR (CPF, NOME, EMAIL, COMISSAO, TELEFONE1, TELEFONE2)
    VALUES (P_CPF, P_NOME, P_EMAIL, P_COMISSAO, P_TELEFONE(1), P_TELEFONE(2));

    DBMS_OUTPUT.PUT_LINE('APRESENTADOR CADASTRADO COM SUCESSO');
END CADASTRAR_APRESENTADOR;
/
-- Procedure para cadastrar um novo Funcionário 

CREATE OR REPLACE PROCEDURE CADASTRAR_FUNCIONARIO (
    P_CPF IN FUNCIONARIO.CPF%TYPE,
    P_NOME IN FUNCIONARIO.NOME%TYPE,
    P_EMAIL IN FUNCIONARIO.EMAIL%TYPE,
    P_SALARIO IN FUNCIONARIO.SALARIO%TYPE,
    P_TELEFONE IN TELEFONE_ARRAY
) IS
BEGIN
    INSERT INTO FUNCIONARIO (CPF, NOME, EMAIL, SALARIO, TELEFONE1, TELEFONE2)
    VALUES (P_CPF, P_NOME, P_EMAIL, P_SALARIO, P_TELEFONE(1), P_TELEFONE(2));

    DBMS_OUTPUT.PUT_LINE('FUNCIONARIO CADASTRADO COM SUCESSO');
END CADASTRAR_FUNCIONARIO;
/

-- Procedure que vai retornar a qtd de ingressos vendidos

CREATE OR REPLACE PROCEDURE RETORNAR_QTD_INGRESSOS_VENDIDOS (
    P_QTD_INGRESSOS OUT NUMBER
) IS
BEGIN
    -- Conta a quantidade total de ingressos vendidos na tabela COMPRA
    SELECT COUNT(*) INTO P_QTD_INGRESSOS
    FROM COMPRA;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro: ' || SQLERRM);
END RETORNAR_QTD_INGRESSOS_VENDIDOS;

/
-- Procedimento para verificar se os emails em FUNCINARIO são válidos
CREATE OR REPLACE PROCEDURE VERIFICAR_EMAIL_funcionario IS 
    cur_cpf FUNCIONARIO.CPF%TYPE;
    cur_email FUNCIONARIO.EMAIL%TYPE;
    CURSOR cur_func IS
        SELECT CPF, EMAIL
        FROM FUNCIONARIO;
    BEGIN
        OPEN cur_func;
        LOOP
            FETCH cur_func INTO cur_cpf, cur_email;
            EXIT WHEN cur_func%NOTFOUND;
            IF cur_email LIKE '%@gmail.com' THEN
                DBMS_OUTPUT.PUT_LINE(cur_cpf ||' tem email válido. email = '|| cur_email);
            ELSE
                DBMS_OUTPUT.PUT_LINE(cur_cpf ||' tem email inválido. email = '|| cur_email);
            END IF;
        END LOOP;
        CLOSE cur_func;
    END;
/